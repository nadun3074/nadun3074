name: Access Google via Headless Browser

on: 
  push:
    branches:
      - main
  workflow_dispatch:  # Manual trigger

jobs:
  access_google:
    runs-on: windows-latest
    
    strategy:
      matrix:
        instance: [1, 2, 3, 4, 5]

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Node.js
      uses: actions/setup-node@v2
      with:
        node-version: '20'  # Update to the latest stable version

    - name: Add delay based on instance
      run: |
        if (${{ matrix.instance }} -eq 2) { Start-Sleep -Seconds 12 }
        if (${{ matrix.instance }} -eq 3) { Start-Sleep -Seconds 24 }
        if (${{ matrix.instance }} -eq 4) { Start-Sleep -Seconds 36 }
        if (${{ matrix.instance }} -eq 5) { Start-Sleep -Seconds 48 }

    - name: Install Tor
      run: |
        choco install tor

    - name: Create access-google.js script
      run: |
        @"
        const puppeteer = require('puppeteer');
        const { exec } = require('child_process');
        const os = require('os');

        function getCPUUsage() {
            const cpus = os.cpus();
            let totalIdle = 0, totalTick = 0;

            cpus.forEach((core) => {
                for (let type in core.times) {
                    totalTick += core.times[type];
                }
                totalIdle += core.times.idle;
            });

            return { idle: totalIdle / cpus.length, total: totalTick / cpus.length };
        }

        function calculateCPUPercentage(start, end) {
            const idleDifference = end.idle - start.idle;
            const totalDifference = end.total - start.total;
            return 100 - ~~(100 * idleDifference / totalDifference);
        }

        async function safeGoto(page, url) {
            let attempts = 0;
            while (attempts < 3) {
                try {
                    await page.goto(url, { waitUntil: 'networkidle2', timeout: 60000 });
                    return;
                } catch (error) {
                    attempts++;
                    console.log('Attempt ' + attempts + ' failed: ' + error.message);  // Fixed line
                    await new Promise(resolve => setTimeout(resolve, 5000)); // wait before retrying
                }
            }
            throw new Error('Failed to load page after 3 attempts');
        }

        (async () => {
            while (true) {
                exec('start tor');
                await new Promise(resolve => setTimeout(resolve, 5000));

                const initialResponse = await (await fetch('http://httpbin.org/ip')).json();
                console.log('Initial IP Address (before Tor):', initialResponse);

                const browser = await puppeteer.launch({
                    headless: true,
                    args: [
                        '--no-sandbox',
                        '--disable-setuid-sandbox',
                        '--proxy-server=socks5://127.0.0.1:9050'
                    ]
                });
                const page = await browser.newPage();

                await safeGoto(page, 'http://httpbin.org/ip');
                const ipResponse = await page.content();
                console.log('New IP Address via Tor:', ipResponse);

                await safeGoto(page, 'https://dileepa80.netlify.app/');
                const title = await page.title();
                console.log('Page Title:', title);

                let startMeasure = getCPUUsage();
                const interval = setInterval(() => {
                    const endMeasure = getCPUUsage();
                    const cpuPercentage = calculateCPUPercentage(startMeasure, endMeasure);
                    console.log('Current CPU Usage:', cpuPercentage + '%');
                    startMeasure = endMeasure;
                }, 30000);

                await new Promise(resolve => setTimeout(resolve, 1500000));
                clearInterval(interval);
                await browser.close();
                exec('taskkill /F /IM tor.exe');
                console.log('Tor stopped.');
                await new Promise(resolve => setTimeout(resolve, 300000));
            }
        })();
        "@ | Set-Content -Path access-google.js

    - name: Install Puppeteer
      run: npm install puppeteer

    - name: Run headless browser script
      run: node access-google.js
