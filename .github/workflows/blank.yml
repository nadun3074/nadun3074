name: Access Google via Headless Browser

on: 
  push:
    branches:
      - main
  workflow_dispatch:  # Manual trigger

jobs:
  access_google:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        instance: [1, 2, 3, 4, 5]

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Node.js
      uses: actions/setup-node@v2
      with:
        node-version: '20'  # Update to the latest stable version

    - name: Install Tor
      run: |
        sudo apt-get update
        sudo apt-get install -y tor

    - name: Create access-google.js script
      run: |
        echo "const puppeteer = require('puppeteer');" > access-google.js
        echo "const { exec } = require('child_process');" >> access-google.js
        echo "const os = require('os');" >> access-google.js
        echo "" >> access-google.js
        echo "function getCPUUsage() {" >> access-google.js
        echo "    const cpus = os.cpus();" >> access-google.js
        echo "    let totalIdle = 0, totalTick = 0;" >> access-google.js
        echo "" >> access-google.js
        echo "    cpus.forEach((core) => {" >> access-google.js
        echo "        for (let type in core.times) {" >> access-google.js
        echo "            totalTick += core.times[type];" >> access-google.js
        echo "        }" >> access-google.js
        echo "        totalIdle += core.times.idle;" >> access-google.js
        echo "    });" >> access-google.js
        echo "" >> access-google.js
        echo "    return { idle: totalIdle / cpus.length, total: totalTick / cpus.length };" >> access-google.js
        echo "}" >> access-google.js
        echo "" >> access-google.js
        echo "function calculateCPUPercentage(start, end) {" >> access-google.js
        echo "    const idleDifference = end.idle - start.idle;" >> access-google.js
        echo "    const totalDifference = end.total - start.total;" >> access-google.js
        echo "    return 100 - ~~(100 * idleDifference / totalDifference);" >> access-google.js
        echo "}" >> access-google.js
        echo "" >> access-google.js
        echo "async function safeGoto(page, url) {" >> access-google.js
        echo "    try {" >> access-google.js
        echo "        await page.goto(url, { waitUntil: 'networkidle2', timeout: 60000 });" >> access-google.js
        echo "    } catch (error) {" >> access-google.js
        echo "        throw new Error('Failed to load page: ' + error.message);" >> access-google.js
        echo "    }" >> access-google.js
        echo "}" >> access-google.js
        echo "" >> access-google.js
        echo "async function reinstallTor() {" >> access-google.js
        echo "    console.log('Uninstalling Tor...');" >> access-google.js
        echo "    exec('sudo apt-get remove --purge -y tor', (err) => {" >> access-google.js
        echo "        if (err) console.error('Error uninstalling Tor:', err);" >> access-google.js
        echo "    });" >> access-google.js
        echo "    await new Promise(resolve => setTimeout(resolve, 10000));" >> access-google.js
        echo "    console.log('Installing Tor...');" >> access-google.js
        echo "    exec('sudo apt-get install -y tor', (err) => {" >> access-google.js
        echo "        if (err) console.error('Error installing Tor:', err);" >> access-google.js
        echo "    });" >> access-google.js
        echo "    await new Promise(resolve => setTimeout(resolve, 10000));" >> access-google.js
        echo "}" >> access-google.js
        echo "" >> access-google.js
        echo "(async () => {" >> access-google.js
        echo "    exec('tor &');" >> access-google.js
        echo "    await new Promise(resolve => setTimeout(resolve, 5000));" >> access-google.js
        echo "" >> access-google.js
        echo "    while (true) {" >> access-google.js
        echo "        const initialResponse = await (await fetch('http://httpbin.org/ip')).json();" >> access-google.js
        echo "        console.log('Initial IP Address (before Tor):', initialResponse);" >> access-google.js
        echo "" >> access-google.js
        echo "        const browser = await puppeteer.launch({" >> access-google.js
        echo "            headless: true," >> access-google.js
        echo "            args: [" >> access-google.js
        echo "                '--no-sandbox'," >> access-google.js
        echo "                '--disable-setuid-sandbox'," >> access-google.js
        echo "                '--proxy-server=socks5://127.0.0.1:9050'" >> access-google.js
        echo "            ]" >> access-google.js
        echo "        });" >> access-google.js
        echo "        const page = await browser.newPage();" >> access-google.js
        echo "" >> access-google.js
        echo "        try {" >> access-google.js
        echo "            await safeGoto(page, 'http://httpbin.org/ip');" >> access-google.js
        echo "            const ipResponse = await page.content();" >> access-google.js
        echo "            console.log('New IP Address via Tor:', ipResponse);" >> access-google.js
        echo "" >> access-google.js
        echo "            await safeGoto(page, 'https://dileepa2.netlify.app/');" >> access-google.js
        echo "            const title = await page.title();" >> access-google.js
        echo "            console.log('Page Title:', title);" >> access-google.js
        echo "        } catch (error) {" >> access-google.js
        echo "            console.error('Error accessing page:', error);" >> access-google.js
        echo "            await reinstallTor();" >> access-google.js
        echo "        }" >> access-google.js
        echo "" >> access-google.js
        echo "        let startMeasure = getCPUUsage();" >> access-google.js
        echo "        const interval = setInterval(() => {" >> access-google.js
        echo "            const endMeasure = getCPUUsage();" >> access-google.js
        echo "            const cpuPercentage = calculateCPUPercentage(startMeasure, endMeasure);" >> access-google.js
        echo "            console.log('Current CPU Usage:', cpuPercentage + '%');" >> access-google.js
        echo "            startMeasure = endMeasure;" >> access-google.js
        echo "        }, 30000);" >> access-google.js
        echo "" >> access-google.js
        echo "        await new Promise(resolve => setTimeout(resolve, 1500000));" >> access-google.js  # 25 minutes
        echo "" >> access-google.js
        echo "        clearInterval(interval);" >> access-google.js
        echo "        await browser.close();" >> access-google.js
        echo "        exec('pkill tor');" >> access-google.js
        echo "        console.log('Tor stopped.');" >> access-google.js
        echo "" >> access-google.js
        echo "        await new Promise(resolve => setTimeout(resolve, 300000)); // 5 minute wait" >> access-google.js
        echo "    }" >> access-google.js
        echo "})();" >> access-google.js

    - name: Install Puppeteer
      run: npm install puppeteer

    - name: Run headless browser script
      run: node access-google.js
